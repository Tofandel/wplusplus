// Thanks Jacky from https://css-tricks.com/draggable-elements-push-others-way/ for a mostly CSS only way to achieve the animation using jQuery Sortable

@mixin redux-serialized-repeater-clearfix {
  &:before,
  &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }
}

.redux-container {
  .redux-container-serialized_repeater {
    $rotationAngle: -45deg;
    $animationDuration: 0.35s; // If changing this time, the matching amount must be changed in the Javascript too
    $blurEnabled: true;
    $threeDEffectsEnabled: true;

    padding: 15px 20px;
    margin-bottom: 7px;
    padding-top: 0;

    > .redux-serialized-repeater-row-container {
      margin-bottom: 1em;

      // There could be different types of fields nested within each other

      // Common styles between all the types
      &.type-simple,
      &.type-card,
      &.type-accordion {
        &.sorting {
          > .redux-serialized-repeater-row > .sort-handle {
            cursor: grabbing;
          }
        }

        > .redux-serialized-repeater-row {
          > .sort-handle,
          > h3 > .sort-handle {
            position: absolute;
            left: 0;
            top: 0;
            width: 19px;
            height: 100%;
            margin: 0;
            padding: 0;
            // cursor: move;
            cursor: grab;

            background: url("assets/images/icon-grabber.svg") no-repeat scroll 100% 50%;
            background-size: 12px auto;
            opacity: 0.15;
            transition: opacity 0.25s;

            &:hover {
              opacity: 0.5;
            }
          }

          > h3 > .sort-handle {
            left: 18px;
          }
        }

      }

      // Common styles between the simple and card types
      &.type-simple,
      &.type-card {

        // Makes room for the friction marks & delete button
        > .redux-serialized-repeater-row > fieldset {
          padding-left: 2.0em;
          padding-right: 2.5em;
        }

        // Changes how the Delete button to an X
        > .redux-serialized-repeater-row > fieldset > .redux-serialized-repeater-delete {
          position: absolute;
          float: none;
          top: 0;
          right: 0;
          padding: 0 0.5em 0.5em 0.5em;
          font-size: 1.5em;
          font-weight: bold;
          text-decoration: none;
          border: none;
          background: none;

          &:after {
            clear: none;
          }
        }
      }

      // Common styles between the card and accordion types
      &.type-card,
      &.type-accordion {
        // This controls the size and position of the placeholder box
        &.ui-sortable {
          .sortable-placeholder {
            .content {
              height: 40px;
              margin-top: 16px;
            }
          }
        }
      }

      // Styles specific to each card type
      &.type-simple {
        // This style is active while a sort is in progress
        &.sorting {

        }

        > .redux-serialized-repeater-row > .sort-handle {
          background-position: 80% 22%;
        }

        // This controls the size and position of the placeholder box
        &.ui-sortable {
          .sortable-placeholder {
            .content {
              height: 15px;
              margin-top: 10px;
            }
          }
        }

        // This style is applied to all the rows after the placeholder, its controls how far the other rows move down
        > .sortable-placeholder ~ .redux-serialized-repeater-row:not(.ui-sortable-helper) {
          transform: translateY(50px);
        }
      }

      &.type-card {
        &.sorting {
          // transition: height 0.3s;

          // > .redux-serialized-repeater-row {
          //   max-height: 100px;
          // }
        }

        // This style is applied to all the rows after the placeholder, its controls how far the other rows move down
        > .sortable-placeholder ~ .redux-serialized-repeater-row:not(.ui-sortable-helper) {
          transform: translateY(80px);
        }

        > .redux-serialized-repeater-row {
          margin-bottom: 6px;
          padding-top: 10px;
          background-color: #f5f5f5;
          border: 1px solid #dedede;
          border-radius: 2px;
        }
      }

      &.type-accordion {
        &.sorting {

        }

        // This style is applied to all the rows after the placeholder, its controls how far the other rows move down
        > .sortable-placeholder ~ .redux-serialized-repeater-row:not(.ui-sortable-helper) {
          transform: translateY(80px);
        }

        // Makes room for the friction marks
        > .redux-serialized-repeater-row {
          margin-bottom: 8px;

          // Open state
          h3 {
            position: relative;
            margin-bottom: 0;
            padding-left: 48px !important;
            padding-right: 32px !important;
            border: 1px solid #dedede;
            border-radius: 4px 4px 4px 4px;
            line-height: 2.7em;
            cursor: pointer;

            // Closed state
            &.ui-accordion-header-active {
              border-radius: 4px 4px 0 0;
            }

            .ui-icon {
              left: 3px;
            }
          }

          > fieldset {
            padding: 12px;
            border: 1px solid #dedede;
            border-top: 0;
            border-radius: 0 0 4px 4px;

            // Hide the friction marks in the body area
            // New ones have been added to the accordion header
            &:before {
              display: none;
              content: '';
            }
          }
        }
      }

      // Styles active while a sort is in progress
      &.sorting {
        > .redux-serialized-repeater-row {
          //background-color: green;
        }

        > .sortable-placeholder {
          //transition: height 0.25s linear;
          //height: 0;
        }
      }

      // Style applied for a short time after the sort is finished
      &.sort-stop {
        > .redux-serialized-repeater-row {
          // Prevent slide transition at end
          transition: none;
        }
      }

      // If this class is present it means this row can be sorted
      &.ui-sortable {
        .sortable-placeholder {
          position: relative;
          width: 100%;
          height: 0;
          margin: 0;
          padding: 0;
          border: none;
          background: none;
          transition: height 0.25s;

          .content {
            position: absolute;
            width: 100%;
            height: 20px;
            margin-top: 14px;
            border: 1px dashed #999;
            background-color: #fbfbfb;
          }
        }

        // The helper is the row (or clone of) that is actually being dragged around
        .ui-sortable-helper {
          cursor: grabbing !important;
          opacity: 0.5;
          filter: blur(0.1px);
          transition: none;
        }
      }

      // Need to set max-heights so the slide animation will work correctly (won't work with %'s unfortunately)
      &.type-simple {
        > .redux-serialized-repeater-row {
          &.making-visible,
          &.initially-deleting {
            max-height: 50px;
          }
        }
      }

      &.type-card,
      &.type-accordion {
        > .redux-serialized-repeater-row {
          &.making-visible,
          &.initially-deleting {
            max-height: 800px;
          }
        }
      }

      // Required for the 3D effects to work
      // Being used as separate class because it can only be applied while animating, otherwise it messed up drag & drop
      &.animating {
        @if $threeDEffectsEnabled {
          perspective: 1000px;
        }
      }

      > .redux-serialized-repeater-row {
        @include redux-serialized-repeater-clearfix;

        position: relative;
        overflow: hidden;
        transition: transform $animationDuration cubic-bezier(0.055, 0.430, 0.345, 1.135);

        // Effects for animating the new/deleted rows

        // This sets up the initial styles for the animation
        &.initially-created {
          max-height: 0;

          @if $threeDEffectsEnabled {
            transform-origin: top center;
            transform: rotateX($rotationAngle) translateY(5%) translateZ(-10px);
          }

          @if $blurEnabled {
            filter: blur(3px);
          }

          opacity: 0;
          transition: none;
        }

        // The sets the end conditions for the animation, letting CSS do the animation
        &.making-visible {
          @if $threeDEffectsEnabled {
            transform: rotateX(0) translateY(0) translateZ(0);
          }

          @if $blurEnabled {
            filter: blur(0px);
          }

          opacity: 1;
          transition: all $animationDuration ease-out;
        }

        &.initially-deleting {
          @if $threeDEffectsEnabled {
            transform-origin: top center;
            transform: rotateX(0) translateY(0) translateZ(0);
          }

          @if $blurEnabled {
            filter: blur(0px);
          }

          opacity: 1;
          transition: none;
        }

        &.making-invisible {
          max-height: 0;

          @if $threeDEffectsEnabled {
            transform: rotateX($rotationAngle) translateY(0) translateZ(-10px);
          }

          @if $blurEnabled {
            filter: blur(3px);
          }

          opacity: 0;
          transition: all $animationDuration ease-in;
        }

        // Accordion title
        > h3 {

        }

        // Field title
        h4 {
          margin: 5px 0 4px 0;

          &:first-child {
            margin-top: 0;
          }
        }

        .description {
          margin: 5px 0 5px 0;
        }
      }
    }

    .redux-serialized-repeater-add {
      float: right;
      &:after {
        clear: both;
      }
    }

    // The default delete style is setup for the accordion display type (it's also pretty much the default WordPress style too)
    .redux-serialized-repeater-delete {
      float: right;

      &:after {
        clear: both;
      }
    }

    .redux-serialized-repeater-header {
      font-weight: bold;
    }

    .redux-field-container {
      padding: 0 0 10px 0 !important;
    }

    .redux-field-container:last-child {
      padding-bottom: 0;
    }

    // Disable CSS effects for old IEs which have broken or poorly implemented effects
    &.redux-field-old-ie {
      > .redux-serialized-repeater-row-container {
        > .redux-serialized-repeater-row {
          filter: none !important;
        }

        &.type-simple {
          > .sortable-placeholder ~ .redux-serialized-repeater-row:not(.ui-sortable-helper) {
            // Make up for the lack of transform
            position: relative;
            top: 50px;
          }
        }

        &.type-card {
          > .sortable-placeholder ~ .redux-serialized-repeater-row:not(.ui-sortable-helper) {
            // Make up for the lack of transform
            position: relative;
            top: 80px;
          }
        }

        &.type-accordion {
          > .sortable-placeholder ~ .redux-serialized-repeater-row:not(.ui-sortable-helper) {
            // Make up for the lack of transform
            position: relative;
            top: 80px;
          }
        }
      }
    }
  }
}

